Задание 1
Ваш друг открыл лавочку с фруктами. Но к сожалению он не справляется со всей новой информацией которая поступает. Он попросил вас разработать систему которая ему с этим поможет.

Потребуется создать класс фрукта. Фрукт хранит:
вид (клубника, яблоко, груша и т.д.) храниться в Enum. Придумать до 10 видов.
срок годности (10 дней, 20 дней и т.д.)
дата поставки
цена

И класс - торговая лавка. Он будет отвечать за хранение информации о складе лавки.

Необходимо принимать поставки фруктов и дополнять базу данных склада лавки новой информацией. void addFruits(String pathToJsonFile) - метод принимает путь к файлу внутри которого находится json с фруктами и датой поставки. Один файл - одна поставка. Базу данных во время работы программы можно хранить в коллекции.

Пример одной поставки
 {
	"fruits": [{
			"type": "Banana",
			"shelfLife": 10,
			"date": "10/07/2017",
			"price": 100
		},
		{
			"type": "Apple",
			"shelfLife": 5,
"date": "10/07/2017",
			"price": 70
		}
	]
}
// в этой поставке 1 яблоко и 1 банан

Нужен метод void save(String pathToJsonFile) который сохранит всю информацию со склада лавки в json файл.
Аналогичный метод void load(String pathToJsonFile) который удаляют текущую информацию из коллекции и загружает новую из сохраненной версии.

В главном классе программы проверьте все методы на работоспособность. Создайте объект класса-лавки, дайте ему несколько поставок с разными данными и датами. Затем сохраните информацию со склада и проверьте полученный json файл.
Также, попробуйте загрузить информацию о складах лавки на прямую из полученного json файла.
Задание 2
Добавить к классу-лавке метод способный сказать какие продукты испортятся к заданной дате List<Fruit> getSpoiledFruits(Date date)

И метод который возвращает список готовых к продаже продуктов
List<Fruit> getAvailableFruits(Date date)

В главном классе программы проверьте работоспособность этих методов.
Задание 3
Перегрузить имеющиеся методы spoiledFruits и availableFruits.
На прием еще одного параметра - вид фрукта
List<Fruit> getSpoiledFruits(Date date, Type type)
List<Fruit> getAvailableFruits(Date date, Type type)
Работают как и прежде, но теперь фильтруют только по заданному типу фрукта

Добавить метод который возвращает продукты которые были доставлены в заданную дату List<Fruit> getAddedFruits(Date date) и его переопределенная версия - List<Fruit> getAddedFruits(Date date, Type type)
Задание 4 (дополнительно)
Необходимо учитывать продукты которые были проданы. Для этого добавим метод void sell(String pathToJsonFile). Метод принимает путь к файлу с джейсоном который хранит записи о клиентах который хотели купить продукты в заданный день.

Если продукты продукты присутствуют на складе в заданном количестве - сделка происходит и товары удаляются со склада, а на счет лавки зачисляются деньги за продукты и продукты со склада удаляются.
В противном случае сделка не происходит и клиент уходит ни с чем, а продукты остаются не тронутыми.

Необходимо добавить числовое значение moneyBalance которое хранит текущий баланс денег лавки. Должен сохраняться и загружаться при вызовах методов save и load.

{
	"clients": [{
			"name": "Вася",
			"type": "Apple",
			"count": 100
		},
		{
			"name": "Джон",
			"type": "Apple",
			"count": 500
		},
		{
			"name": "Джон",
			"type": "Banana",
			"count": 1
		}
	]
}
// Вася хочет купить 100 яблок, а Джон хочет купить 500 яблок и 1 банан.
Задание 5 (дополнительно high-level)
После выполненных задач, ваш друг разбогател и открыл много лавок с фруктами. Теперь он просит вас помочь с менеджерингом всех сразу.

Необходимо создать класс Company. Который имеет внутри себя
коллекцию лавок
moneyBalance - баланс компании
Методы
void save(String pathToJsonFile) сохраняет всю информацию компании
void load(String pathToJsonFile) загружает всю информацию компании
геттер лавки по индексу из коллекции
int getCompanyBalance() возвращает сумму балансов всех лавок
List<Fruit> getSpoiledFruits(Date date)
работает также, но в масштабах компании (по всем лавкам)
List<Fruit> getAvailableFruits(Date date)
работает также, но в масштабах компании (по всем лавкам)
List<Fruit> getAddedFruits(Date date)
работает также, но в масштабах компании (по всем лавкам)
List<Fruit> getSpoiledFruits(Date date, Type type)
работает также, но в масштабах компании (по всем лавкам)
List<Fruit> getAvailableFruits(Date date, Type type)
работает также, но в масштабах компании (по всем лавкам)
List<Fruit> getAddedFruits(Date date, Type type)
работает также, но в масштабах компании (по всем лавкам)